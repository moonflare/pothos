extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.3", import: ["@key", "@shareable", "@inaccessible", "@tag", "@provides", "@requires", "@external", "@extends", "@override"])

input AddPlayerToTeamInput {
  teamId: ID!
  player: CreatePlayerInput!
}

input AddPlayersToTeamInput {
  teamId: ID!
  players: [CreatePlayerInput!]!
}

input CreateGame {
  teamId: ID!
  complete: Boolean
  opponentName: String!
}

input CreatePlayerInput {
  name: String!
  number: Int!
}

input CreatePointInput {
  gameId: ID!
  scored: Boolean
  startedOnOffense: Boolean!
  playerIds: [ID!]!
}

input CreateTeamInput {
  name: String!
  players: [CreatePlayerInput!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Game implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  complete: Boolean!
  opponentName: String!
  points: [Point!]!
  team: Team!
  score: GameScore!
}

type GameScore {
  ownScore: Int!
  opponentScore: Int!
}

type Mutation {
  createGame(input: CreateGame!): Game!
  addPlayerToTeam(input: AddPlayerToTeamInput!): Team
  addPlayersToTeam(input: AddPlayersToTeamInput!): Team
  addPoint(input: CreatePointInput!): Point
  createTeam(input: CreateTeamInput!): Team
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Player implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  team: Team!
  points(before: String, after: String, first: Int, last: Int): PlayerPointsConnection!
  games(before: String, after: String, first: Int, last: Int): PlayerGamesConnection!
}

type PlayerGamesConnection {
  pageInfo: PageInfo!
  edges: [PlayerGamesConnectionEdge]!
}

type PlayerGamesConnectionEdge {
  node: Game!
  cursor: String!
}

type PlayerPointsConnection {
  pageInfo: PageInfo!
  edges: [PlayerPointsConnectionEdge]!
}

type PlayerPointsConnectionEdge {
  node: Point!
  cursor: String!
}

type Point implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  scored: Boolean!
  startedOnOffense: Boolean!
  players: [Player!]!
  game: Game!
  team: Team!
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  games(before: String, after: String, first: Int, last: Int): QueryGamesConnection!
  game(id: ID!): Game
  teams(before: String, after: String, first: Int, last: Int): QueryTeamsConnection!
  team(id: ID!): Team
}

type QueryGamesConnection {
  pageInfo: PageInfo!
  edges: [QueryGamesConnectionEdge]!
}

type QueryGamesConnectionEdge {
  node: Game!
  cursor: String!
}

type QueryTeamsConnection {
  pageInfo: PageInfo!
  edges: [QueryTeamsConnectionEdge]!
}

type QueryTeamsConnectionEdge {
  node: Team!
  cursor: String!
}

type Team implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  players: [Player!]!
  points(before: String, after: String, first: Int, last: Int): TeamPointsConnection!
  games(before: String, after: String, first: Int, last: Int): TeamGamesConnection!
}

type TeamGamesConnection {
  pageInfo: PageInfo!
  edges: [TeamGamesConnectionEdge]!
}

type TeamGamesConnectionEdge {
  node: Game!
  cursor: String!
}

type TeamPointsConnection {
  pageInfo: PageInfo!
  edges: [TeamPointsConnectionEdge]!
}

type TeamPointsConnectionEdge {
  node: Point!
  cursor: String!
}